if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
noquote(paste('Increased string length to', strLength, 'because of duplicates.'))
}
}
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector <- as.factor(outVector)
# Save list and create key
# Input converted to character
inVector  <- as.character(sample(1:99, 10000, replace = TRUE))
# Get number of unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
noquote(paste('Increased string length to', strLength, 'because of duplicates.'))
}
}
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector <- as.factor(outVector)
inVector
strLength
strLength <- 1
# Input converted to character
inVector  <- as.character(sample(1:99, 10000, replace = TRUE))
# Get number of unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
noquote(paste('Increased string length to', strLength, 'because of duplicates.'))
}
}
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector <- as.factor(outVector)
outVector
strLength
strLength <- 1
# Input converted to character
inVector  <- as.character(sample(1:99, 10000, replace = TRUE))
# Get number of unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
noquote(paste('Increased string length to', strLength, 'because of duplicates.'))
}
}
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector <- as.factor(outVector)
strLength
noquote(paste('Increased string length to', strLength, 'because of duplicates.'))
# Input converted to character
inVector  <- as.character(sample(1:99, 10000, replace = TRUE))
strLength <- 1
# Get number of unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
print(paste('Increased string length to', strLength, 'because of duplicates.'))
}
}
# Input converted to character
inVector  <- as.character(sample(1:99, 10000, replace = TRUE))
strLength <- 1
# Get number of unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
print(paste('Increased string length to', strLength, 'because of duplicates.'), quote = FALSE)
}
}
# Input converted to character
inVector  <- as.character(sample(1:99, 10000, replace = TRUE))
strLength <- 1
# Get number of unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
print(paste('Increased string length to', strLength, 'because of duplicates.'), quote = FALSE)
}
}
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector <- as.factor(outVector)
outVector
# Input converted to character
inVector  <- as.character(sample(1:2, 10, replace = TRUE))
# Get unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
print(paste('Increased string length to', strLength, 'because of duplicates.'), quote = FALSE)
}
}
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector <- as.factor(outVector)
# Save list and create key
outVector
inVector
subs
anonStr
# Assign anonymized strings to vector and concert to factor
outVector <- suppressWarnings(replace(inVector, inVector %in% subs, anonStr))
outVector
inVector %in% subs
length(inVector)
length(outVector)
a <- c(2, 1, 1, 2)
b <- c('a', 'b')
replace(a, a %in% unique(a), b)
class(inVector)
replace(a, a %in% unique(a), b)
letters[a]
df1 <- data.frame(a=c(2, 1, 1, 2))
df2 <- data.frame(a=c(1, 2), value=c('a', 'b'), stringsAsFactors=FALSE)
result <- merge(df1, df2)$value
result
df1
df2
merge(df1, df2)
library(plyr)
df1 <- data.frame(a=c(2, 1, 1, 2))
df2 <- data.frame(a=c(1, 2), value=c('a', 'b'), stringsAsFactors=FALSE)
result <- join(df1, df2)$value
result
df1 <- data.frame(a=inVector)
df2 <- data.frame(a=subs, value=anonStr, stringsAsFactors=FALSE)
result <- join(df1, df2)$value
result
inVector
suppressWarnings(join(df1, df2)$value)
suppressMessages(join(df1, df2)$value)
plyr::join(df1, df2)$value
outVector
return(outVector)
getwd()
setwd("C:/Users/aq01/Desktop")
help("save")
deAnonKey <- data.frame(origID = subs,
newId  = anonStr)
deAnonKey
write(deAnonKey)
help9write.csv
help(write.csv)
write.csv('#deAnonKey',
file = "bla.csv",
row.names = FALSE,
col.names = FALSE)
write.csv(deAnonKey,
file = "bla.csv",
row.names = FALSE,
col.names = FALSE,
append    = TRUE)
write.csv('#deAnonKey',
file = "bla.csv",
row.names = FALSE,
col.names = FALSE)
write('#deAnonKey',
file = "bla.csv",
row.names = FALSE,
col.names = FALSE)
write('#deAnonKey',
file = "bla.csv")
write.csv(deAnonKey,
file = "bla.csv",
row.names = FALSE,
col.names = FALSE,
append    = TRUE)
fileConn<-file("output.txt")
writeLines(c("Hello",deAnonKey), fileConn)
close(fileConn)
paste(deAnonKey, sep = " ", collapse = NULL)
deAnonKey
cat(names(deAnonKey))
deAnonKey[1,]
as.character(deAnonKey[1,])
deAnonKey[,1]
deAnonKey
deAnonKey[1, ]
deAnonKey[. 1]
deAnonKey[, 1]
deAnonKey[, 2]
as.numeric(deAnonKey[, 2])
help(factor)
factor(outVector, levels = sample(1:numSub), labels = outVector)
sample(1:numSub)
sample(1:numSub)
sample(1:numSub)
outVector <- factor(outVector,levels(outVector)[sample(1:numSub)])
outVector
outVector <- as.factor(outVector)
outVector <- factor(outVector,levels(outVector)[sample(1:numSub)])
outVector <- suppressMessages(plyr::join(df1, df2)$value)
outVector <- as.factor(outVector)
outVector <- factor(outVector,levels(outVector)[sample(1:numSub)])
outVector
levels(outVector)
outVector <- factor(outVector,levels(outVector)[sample(1:numSub)])
levels(outVector)
as.numeric(deAnonKey[, 2])
deAnonKey <- data.frame(origID = subs,
newId  = anonStr)
as.numeric(deAnonKey[, 2])
deAnonKey[, 2]
levels(outVector)
deAnonKey[1, ]
as.character(deAnonKey[1, ])
deAnonKey <- data.frame(origID = as.character(subs),
newId  = as.character(anonStr))
as.character(deAnonKey[1, ])
anonStr
adeAnonKey[1, ]
# Save list and create key
deAnonKey <- data.frame(origID = as.character(subs),
newId  = as.character(anonStr))
deAnonKey[1,]
as.character(deAnonKey[1,])
deAnonKey$newId
deAnonKey <- data.frame(origID = as.character(subs),
newId  = as.character(anonStr))
deAnonKey$newId
# Save list and create key
deAnonKey <- data.frame(origID = subs,
newId  = anonStr
)
deAnonKey$origID
deAnonKey$origID <- as.character(deAnonKey$origID)
deAnonKey$origID
help(data.frame)
deAnonKey <- data.frame(origID = subs,
newId  = anonStr,
stringsAsFactors = FALSE)
deAnonKey$origID
deAnonKey$newId
deAnonKey[1,]
as.character(deAnonKey[1,])
sink("outfile.txt")
cat("#hello")
cat(names(deAnonKey))
for(i in 1:numSub){
cat(as.character(deAnonKey[i,]))
}
sink()
getwd()
file.show("outfile.txt")
cat("#Hello", file = "outfile.txt", sep = "\n")
cat(names(deAnonKey),file="outfile.txt", sep = "\n",append = TRUE)
for(i in 1:numSub){
cat(as.character(deAnonKey[i,]), file = "outfile.txt", sep = "\n", append = TRUE)
}
cat("#Hello", file = "outfile.txt", sep = "\n")
ls()
fileConn <- file("output.txt")
writeLines("#Hello", fileConn)
writeLines(names(deAnonKey), fileConn)
for(i in 1:numSub){
writeLines(deAnonKey[i,], fileConn)
}
close(fileConn)
fileConn <- file("output.txt")
writeLines("#Hello", fileConn)
writeLines(names(deAnonKey), fileConn)
for(i in 1:numSub){
writeLines(as.character(deAnonKey[i,]), fileConn)
}
close(fileConn)
fileConn <- file("output.txt")
writeLines("#Hello", fileConn)
writeLines(names(deAnonKey), fileConn)
for(i in 1:numSub){
writeLines(as.character(deAnonKey[i,]), fileConn)
}
close(fileConn)
names(deAnonKey)
paste(names(deAnonKey), collapse = '')
paste(names(deAnonKey), collapse = ' ')
paste(names(deAnonKey), collapse = '\t')
as.character(deAnonKey[i,]),
as.character(deAnonKey[i,])
commentStr <- "#Hello"
headerStr  <- paste(names(deAnonKey), collapse = '\t')
keyStr     <- c()
for(i in 1:numSub){
keyStr   <- paste(as.character(deAnonKey[i,]), collapse = '\t')
}
keyStr
keyStr     <- c()
for(i in 1:numSub){
keyStr   <- c(keyStr, paste(as.character(deAnonKey[i,]), collapse = '\t'))
}
keyStr
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n')
outputStr
cat(outputStr, file = "outfile.txt")
outputStr
commentStr
headerStr
commentStr +headerStr
keyStr
paste(keyStr, collapse = '\n')
paste(names(deAnonKey), '\n', collapse = '\t')
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n')
outputStr
keyStr
keyStr    <- paste(keyStr, collapse = '\n')
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n')
outputStr
cat(outputStr, file = "outfile.txt")
commentStr <- "#Hello"
headerStr  <- paste(names(deAnonKey), collapse = '\t')
keyStr     <- c()
for(i in 1:numSub){
keyStr   <- c(keyStr, paste(as.character(deAnonKey[i,]), collapse = '\t'))
}
keyStr    <- paste(keyStr, collapse = '\n')
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n')
cat(outputStr, file = "outfile.txt")
outputStr
outputStr
keyStr    <- paste(keyStr, collapse = '\n')
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n', sep = '\n')
cat(outputStr, file = "outfile.txt")
anonymize(1:20)
anonymize <- function(inVector, fileName = 'anonKey', strLength = 6){
# Input converted to character
inVector  <- as.character(sample(1:2, 10, replace = TRUE))
# Get unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
print(paste('Increased string length to', strLength, 'because of duplicates.'), quote = FALSE)
}
}
# Assign anonymized strings to vector and convert to factor
# Solution for this problem found here
df1       <- data.frame(a = inVector)
df2       <- data.frame(a = subs, value = anonStr, stringsAsFactors = FALSE)
outVector <- suppressMessages(plyr::join(df1, df2)$value)
outVector <- as.factor(outVector)
# Removing order of factor
outVector <- factor(outVector,levels(outVector)[sample(1:numSub)])
# Save list and create key
deAnonKey <- data.frame(origID = subs,
newId  = anonStr,
stringsAsFactors = FALSE)
# Create text strings and combine
commentStr <- "#Hello"
headerStr  <- paste(names(deAnonKey), collapse = '\t')
keyStr     <- c()
for(i in 1:numSub){
keyStr   <- c(keyStr, paste(as.character(deAnonKey[i,]), collapse = '\t'))
}
keyStr    <- paste(keyStr, collapse = '\n')
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n', sep = '\n')
# Write text string to gile
cat(outputStr, file = datedFileNam(fileName, '.txt'))
return(outVector)
}
anonymize(1:20)
library(assortedRFunctions)
anonymize(1:20)
anonymize <- function(inVector, fileName = 'anonKey', strLength = 6){
# Input converted to character
inVector  <- as.character(inVector)
# Get unique subjects
subs      <- unique(inVector)
numSub    <- length(subs)
# Create anonymized strings for subects
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
# Check whether all strings are unique, if not first try again,
# then increase string length by 1 each attempt
if(any(duplicated(anonStr))){
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
while(any(duplicated(anonStr))){
strLength <- strLength + 1
anonStr   <- apply(as.array(rep(strLength, numSub)), 1, createAnonStr)
print(paste('Increased string length to', strLength, 'because of duplicates.'), quote = FALSE)
}
}
# Assign anonymized strings to vector and convert to factor
# Solution for this problem found here
df1       <- data.frame(a = inVector)
df2       <- data.frame(a = subs, value = anonStr, stringsAsFactors = FALSE)
outVector <- suppressMessages(plyr::join(df1, df2)$value)
outVector <- as.factor(outVector)
# Removing order of factor
outVector <- factor(outVector,levels(outVector)[sample(1:numSub)])
# Save list and create key
deAnonKey <- data.frame(origID = subs,
newId  = anonStr,
stringsAsFactors = FALSE)
# Create text strings and combine
commentStr <- "#Hello"
headerStr  <- paste(names(deAnonKey), collapse = '\t')
keyStr     <- c()
for(i in 1:numSub){
keyStr   <- c(keyStr, paste(as.character(deAnonKey[i,]), collapse = '\t'))
}
keyStr    <- paste(keyStr, collapse = '\n')
outputStr <- paste(commentStr, headerStr, keyStr, collapse = '\n', sep = '\n')
# Write text string to gile
cat(outputStr, file = datedFileNam(fileName, '.txt'))
return(outVector)
}
anonymize(1:20)
anonymize(1:20, strLength = 1)
anonymize(1:200, strLength = 1)
bla <- anonymize(1:200, strLength = 1)
bla <- anonymize(1:20000, strLength = 1)
bla <- anonymize(1:20000, strLength = 5)
bla <- anonymize(1:20000, strLength = 6)
bla
bla <- anonymize(c(1, 2, 3, 1, 2), strLength = 6)
bla
setwd("U:/Projects/variousFiles/rStuff")
install("assortedRFunctions")#]
library("devtools")
library(roxygen2)
install("assortedRFunctions")#]
install("assortedRFunctions")#]
library(assortedRFunctions)
anonymize(1:10)
anonymize(1:12)
anonymize(1:2)
as.numeric(anonymize(1:12))
source('U:/Projects/variousFiles/rStuff/assortedRFunctions/R/anonymize.R')
install("assortedRFunctions")
devtools::install_github('assortedRFunctions', 'jaquent')
setwd("..")
install("assortedRFunctions")
library(roxygen2)
setwd("..")
install("assortedRFunctions")
library("devtools")
getwd()
setwd("U:/Projects/variousFiles/rStuff")
install('assortedRFunctions')
devtools::install_github('assortedRFunctions', 'jaquent')
devtools::install_github('assortedRFunctions', 'jaquent')
install_github("jaquent'/assortedRFunctions")
install_github("jaquent'/assortedRFunctions")
install_github("JAQuent/assortedRFunctions")
